{"version":3,"sources":["Alternatives.js","App.js","serviceWorker.js","index.js"],"names":["Alternatives","_ref","data","length","react_default","a","createElement","map","word","key","knownWords","App","_useState","useState","_useState2","Object","slicedToArray","setWord","_useState3","_useState4","setData","useEffect","fetch","concat","then","res","json","className","c","onClick","src_Alternatives","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8NAeeA,SAbM,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACtB,OAAKA,GAASA,EAAKC,OAIjBC,EAAAC,EAAAC,cAAA,UACGJ,EAAKK,IAAI,SAAAC,GAAI,OACZJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,GAAOA,MALbJ,EAAAC,EAAAC,cAAA,2DCCLI,EAAa,CACjB,UAAW,QAAS,MAAO,SAkCdC,EA/BH,WAAM,IAAAC,EACQC,mBAAS,WADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTJ,EADSM,EAAA,GACHG,EADGH,EAAA,GAAAI,EAEQL,mBAAS,IAFjBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEThB,EAFSiB,EAAA,GAEHC,EAFGD,EAAA,GAUhB,OANAE,oBAAU,WACRC,MAAK,yBAAAC,OAA0Bf,IAC5BgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAKJ,IACP,CAACZ,IAGFJ,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAAA,UAAQqB,UAAU,cAChBvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGI,EAAWH,IAAI,SAAAqB,GAAC,OACfxB,EAAAC,EAAAC,cAAA,MAAIG,IAAKmB,GACPxB,EAAAC,EAAAC,cAAA,UAAQuB,QAAS,kBAAMZ,EAAQW,KAAKA,SAM9CxB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,6BAAqBE,GACrBJ,EAAAC,EAAAC,cAACwB,EAAD,CAAc5B,KAAMA,OCtBtB6B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTd,KAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAAf,OAAMuC,GAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtCjB,MAAMgB,GACHd,KAAK,SAAA0C,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAMhD,KAAK,SAAAmB,GACjCA,EAAa8B,aAAajD,KAAK,WAC7BS,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAMhD,KAAK,WACjC0B,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.c0b50a97.chunk.js","sourcesContent":["import React from 'react';\n\nconst Alternatives = ({ data }) => {\n  if (!data || !data.length)\n    return <p>There wasn't any data found for this, sorry!</p>\n\n  return (\n    <ul>\n      {data.map(word => (\n        <li key={word}>{word}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Alternatives;\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\n\nimport Alternatives from './Alternatives'\n\nconst knownWords = [\n  'default', 'happy', 'sad', 'angry'\n]\n\nconst App = () => {\n  const [word, setWord] = useState('default')\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    fetch(`http://localhost:8765/${word}`)\n      .then(res => res.json())\n      .then(setData)\n  }, [word])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <nav>\n          <ul>\n            {knownWords.map(c => (\n              <li key={c}>\n                <button onClick={() => setWord(c)}>{c}</button>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </header>\n      <main>\n        <h1>Alternatives to {word}</h1>\n        <Alternatives data={data} />\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}